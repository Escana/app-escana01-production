-- Crear tabla de estadísticas
CREATE TABLE IF NOT EXISTS stats (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date DATE NOT NULL,
    total_visits INTEGER DEFAULT 0,
    male_visits INTEGER DEFAULT 0,
    female_visits INTEGER DEFAULT 0,
    chilean_visits INTEGER DEFAULT 0,
    foreign_visits INTEGER DEFAULT 0,
    total_incidents INTEGER DEFAULT 0,
    severe_incidents INTEGER DEFAULT 0,
    age_18_25_male INTEGER DEFAULT 0,
    age_26_35_male INTEGER DEFAULT 0,
    age_36_45_male INTEGER DEFAULT 0,
    age_46_55_male INTEGER DEFAULT 0,
    age_56_plus_male INTEGER DEFAULT 0,
    age_18_25_female INTEGER DEFAULT 0,
    age_26_35_female INTEGER DEFAULT 0,
    age_36_45_female INTEGER DEFAULT 0,
    age_46_55_female INTEGER DEFAULT 0,
    age_56_plus_female INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    UNIQUE(date)
);

-- Función para actualizar el timestamp de updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc'::text, NOW());
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para actualizar updated_at
CREATE TRIGGER update_stats_updated_at
    BEFORE UPDATE ON stats
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Función para calcular y actualizar estadísticas diarias
CREATE OR REPLACE FUNCTION calculate_daily_stats(target_date DATE)
RETURNS void AS $$
BEGIN
    -- Insertar o actualizar estadísticas para el día
    INSERT INTO stats (
        date,
        total_visits,
        male_visits,
        female_visits,
        chilean_visits,
        foreign_visits,
        total_incidents,
        severe_incidents,
        age_18_25_male,
        age_26_35_male,
        age_36_45_male,
        age_46_55_male,
        age_56_plus_male,
        age_18_25_female,
        age_26_35_female,
        age_36_45_female,
        age_46_55_female,
        age_56_plus_female
    )
    SELECT
        target_date,
        -- Contar visitas totales
        COUNT(DISTINCT v.id),
        -- Contar visitas por género
        COUNT(DISTINCT CASE WHEN c.sexo = 'M' THEN v.id END),
        COUNT(DISTINCT CASE WHEN c.sexo = 'F' THEN v.id END),
        -- Contar visitas por nacionalidad
        COUNT(DISTINCT CASE WHEN c.nacionalidad = 'CL' THEN v.id END),
        COUNT(DISTINCT CASE WHEN c.nacionalidad != 'CL' THEN v.id END),
        -- Contar incidentes
        (SELECT COUNT(*) FROM incidents i WHERE DATE(i.created_at) = target_date),
        (SELECT COUNT(*) FROM incidents i WHERE DATE(i.created_at) = target_date AND i.severity >= 4),
        -- Distribución por edad y género
        COUNT(DISTINCT CASE WHEN c.sexo = 'M' AND c.edad BETWEEN 18 AND 25 THEN v.id END),
        COUNT(DISTINCT CASE WHEN c.sexo = 'M' AND c.edad BETWEEN 26 AND 35 THEN v.id END),
        COUNT(DISTINCT CASE WHEN c.sexo = 'M' AND c.edad BETWEEN 36 AND 45 THEN v.id END),
        COUNT(DISTINCT CASE WHEN c.sexo = 'M' AND c.edad BETWEEN 46 AND 55 THEN v.id END),
        COUNT(DISTINCT CASE WHEN c.sexo = 'M' AND c.edad >= 56 THEN v.id END),
        COUNT(DISTINCT CASE WHEN c.sexo = 'F' AND c.edad BETWEEN 18 AND 25 THEN v.id END),
        COUNT(DISTINCT CASE WHEN c.sexo = 'F' AND c.edad BETWEEN 26 AND 35 THEN v.id END),
        COUNT(DISTINCT CASE WHEN c.sexo = 'F' AND c.edad BETWEEN 36 AND 45 THEN v.id END),
        COUNT(DISTINCT CASE WHEN c.sexo = 'F' AND c.edad BETWEEN 46 AND 55 THEN v.id END),
        COUNT(DISTINCT CASE WHEN c.sexo = 'F' AND c.edad >= 56 THEN v.id END)
    FROM visits v
    JOIN clients c ON v.client_id = c.id
    WHERE DATE(v.created_at) = target_date
    ON CONFLICT (date) DO UPDATE SET
        total_visits = EXCLUDED.total_visits,
        male_visits = EXCLUDED.male_visits,
        female_visits = EXCLUDED.female_visits,
        chilean_visits = EXCLUDED.chilean_visits,
        foreign_visits = EXCLUDED.foreign_visits,
        total_incidents = EXCLUDED.total_incidents,
        severe_incidents = EXCLUDED.severe_incidents,
        age_18_25_male = EXCLUDED.age_18_25_male,
        age_26_35_male = EXCLUDED.age_26_35_male,
        age_36_45_male = EXCLUDED.age_36_45_male,
        age_46_55_male = EXCLUDED.age_46_55_male,
        age_56_plus_male = EXCLUDED.age_56_plus_male,
        age_18_25_female = EXCLUDED.age_18_25_female,
        age_26_35_female = EXCLUDED.age_26_35_female,
        age_36_45_female = EXCLUDED.age_36_45_female,
        age_46_55_female = EXCLUDED.age_46_55_female,
        age_56_plus_female = EXCLUDED.age_56_plus_female;
END;
$$ LANGUAGE plpgsql;

-- Trigger para actualizar estadísticas cuando se crea una nueva visita
CREATE OR REPLACE FUNCTION update_stats_on_visit()
RETURNS TRIGGER AS $$
BEGIN
    PERFORM calculate_daily_stats(DATE(NEW.created_at));
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_visit_stats
    AFTER INSERT OR UPDATE ON visits
    FOR EACH ROW
    EXECUTE FUNCTION update_stats_on_visit();

-- Trigger para actualizar estadísticas cuando se crea un nuevo incidente
CREATE OR REPLACE FUNCTION update_stats_on_incident()
RETURNS TRIGGER AS $$
BEGIN
    PERFORM calculate_daily_stats(DATE(NEW.created_at));
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_incident_stats
    AFTER INSERT OR UPDATE ON incidents
    FOR EACH ROW
    EXECUTE FUNCTION update_stats_on_incident();

-- Función para obtener estadísticas por período
CREATE OR REPLACE FUNCTION get_stats(
    p_start_date DATE,
    p_end_date DATE
) RETURNS json AS $$
BEGIN
    RETURN (
        WITH period_stats AS (
            SELECT
                json_build_object(
                    'female', json_build_object(
                        'count', COALESCE(SUM(female_visits), 0),
                        'change', COALESCE(
                            ROUND(
                                ((SUM(female_visits)::float / 
                                  NULLIF(LAG(SUM(female_visits)) OVER (ORDER BY date), 0)) - 1) * 100,
                                1
                            )::text || '%',
                            '0%'
                        )
                    ),
                    'male', json_build_object(
                        'count', COALESCE(SUM(male_visits), 0),
                        'change', COALESCE(
                            ROUND(
                                ((SUM(male_visits)::float / 
                                  NULLIF(LAG(SUM(male_visits)) OVER (ORDER BY date), 0)) - 1) * 100,
                                1
                            )::text || '%',
                            '0%'
                        )
                    )
                ) as attendance_data,
                json_build_object(
                    'total', json_build_object(
                        'count', COALESCE(SUM(total_incidents), 0),
                        'change', COALESCE(
                            ROUND(
                                ((SUM(total_incidents)::float / 
                                  NULLIF(LAG(SUM(total_incidents)) OVER (ORDER BY date), 0)) - 1) * 100,
                                1
                            )::text || '%',
                            '0%'
                        )
                    ),
                    'bans', json_build_object(
                        'count', COALESCE(SUM(severe_incidents), 0),
                        'change', COALESCE(
                            ROUND(
                                ((SUM(severe_incidents)::float / 
                                  NULLIF(LAG(SUM(severe_incidents)) OVER (ORDER BY date), 0)) - 1) * 100,
                                1
                            )::text || '%',
                            '0%'
                        )
                    )
                ) as incidents_data,
                json_build_object(
                    'chilean', COALESCE(SUM(chilean_visits), 0),
                    'foreign', COALESCE(SUM(foreign_visits), 0)
                ) as nationality_data,
                json_agg(json_build_object(
                    'date', date,
                    'total_visits', total_visits
                ) ORDER BY date) as daily_visits,
                json_build_object(
                    'age_18_25', json_build_object(
                        'male', COALESCE(SUM(age_18_25_male), 0),
                        'female', COALESCE(SUM(age_18_25_female), 0)
                    ),
                    'age_26_35', json_build_object(
                        'male', COALESCE(SUM(age_26_35_male), 0),
                        'female', COALESCE(SUM(age_26_35_female), 0)
                    ),
                    'age_36_45', json_build_object(
                        'male', COALESCE(SUM(age_36_45_male), 0),
                        'female', COALESCE(SUM(age_36_45_female), 0)
                    ),
                    'age_46_55', json_build_object(
                        'male', COALESCE(SUM(age_46_55_male), 0),
                        'female', COALESCE(SUM(age_46_55_female), 0)
                    ),
                    'age_56_plus', json_build_object(
                        'male', COALESCE(SUM(age_56_plus_male), 0),
                        'female', COALESCE(SUM(age_56_plus_female), 0)
                    )
                ) as age_distribution
            FROM stats
            WHERE date BETWEEN p_start_date AND p_end_date
            GROUP BY date
        )
        SELECT json_build_object(
            'stats', row_to_json(period_stats)
        )
        FROM period_stats
    );
END;
$$ LANGUAGE plpgsql;

-- Crear índices para mejorar el rendimiento
CREATE INDEX IF NOT EXISTS idx_stats_date ON stats(date);
CREATE INDEX IF NOT EXISTS idx_visits_created_at ON visits(created_at);
CREATE INDEX IF NOT EXISTS idx_incidents_created_at ON incidents(created_at);

-- Función para poblar datos históricos
CREATE OR REPLACE FUNCTION populate_historical_stats(
    p_start_date DATE,
    p_end_date DATE DEFAULT CURRENT_DATE
) RETURNS void AS $$
DECLARE
    curr_date DATE;
BEGIN
    curr_date := p_start_date;
    WHILE curr_date <= p_end_date LOOP
        PERFORM calculate_daily_stats(curr_date);
        curr_date := curr_date + INTERVAL '1 day';
    END LOOP;
END;
$$ LANGUAGE plpgsql;

